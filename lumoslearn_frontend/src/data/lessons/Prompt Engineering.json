{
  "title": "Prompt Engineering",
  "content": "Prompt engineering is the art and science of designing effective inputs (called \"prompts\") for large language models (LLMs) to guide their behavior and elicit desired outputs. As LLMs like GPT-3, GPT-4, and Gemini become increasingly powerful and versatile, the way we phrase our requests profoundly impacts the quality and relevance of their responses. It's like learning how to ask the right question to get the most helpful answer from a very knowledgeable, but sometimes literal, expert.<br><br>\n    <b>The Goal of Prompt Engineering:</b><br>\n    The primary goal is to craft prompts that are clear, specific, and provide sufficient context to direct the LLM towards generating the desired kind of text, code, or other output. Effective prompt engineering minimizes ambiguity and maximizes the chances of getting relevant and accurate results.<br><br>\n    <b>Key Principles of Prompt Engineering:</b><br>\n    1.  <b>Clarity and Specificity:</b> Be precise in what you want the LLM to do. Avoid vague language. Specify the desired format, tone, length, and style of the output.<br>\n    2.  <b>Provide Context:</b> Give the LLM necessary background information. This could include examples of desired input/output pairs (few-shot prompting), defining terms, or setting the scenario.<br>\n    3.  <b>Define the Task:</b> Clearly state the task you want the LLM to perform (e.g., \"Summarize the following article,\" \"Write a Python function,\" \"Answer the question based on the provided text\").<br>\n    4.  <b>Specify the Desired Output Format:</b> If you need the output in a specific format (e.g., a bulleted list, a JSON object, a dialogue), explicitly state this in the prompt.<br>\n    5.  <b>Iterate and Refine:</b> Prompt engineering is often an iterative process. You may need to try different phrasings and structures to find what works best for a particular LLM and task.<br>\n    6.  <b>Consider Negative Constraints:</b> Sometimes, telling the LLM what *not* to do can be as helpful as telling it what to do.<br><br>\n    <b>Types of Prompting:</b><br>\n    *   <b>Zero-shot prompting:</b> Asking the LLM to perform a task without providing any examples.<br>\n    *   <b>Few-shot prompting:</b> Providing a few examples of input/output pairs to guide the LLM.<br>\n    *   <b>Chain-of-thought prompting:</b> Asking the LLM to show its step-by-step reasoning process before providing the final answer.<br><br>\n    Prompt engineering is a rapidly evolving skill as LLMs become more sophisticated. Mastering it allows users to unlock the full potential of these powerful AI models for a wide range of applications, from content creation and translation to coding assistance and information retrieval. It is particularly relevant for large language models (LLMs) and foundation models, which are pre-trained on massive datasets and can generalize to new concepts.",
  "quiz": [
    {
      "question": "What is the main goal of prompt engineering?",
      "options": [
        "To make LLMs slower",
        "To design effective inputs to guide LLM behavior and elicit desired outputs",
        "To trick LLMs into giving incorrect information",
        "To make prompts as vague as possible"
      ],
      "answer": 1
    },
    {
      "question": "Which principle of prompt engineering involves providing examples of desired input/output pairs?",
      "options": [
        "Clarity and Specificity",
        "Define the Task",
        "Few-shot prompting",
        "Negative Constraints"
      ],
      "answer": 2
    },
    {
      "question": "Why is prompt engineering becoming an important skill?",
      "options": [
        "Because LLMs are becoming less powerful",
        "Because LLMs are becoming increasingly powerful and the way we phrase requests impacts their responses",
        "Because it is no longer possible to get useful outputs from LLMs without it",
        "It is not an important skill"
      ],
      "answer": 1
    }
  ],
  "title_hi": "शीघ्र अभियांत्रिकी",
  "content_hi": "प्रॉम्प्ट इंजीन��यरिंग अपने व्यवहार और वांछित आउटपुट को निर्देशित करने के लिए बड़ी भाषा मॉडल (एलएलएम) के लिए प्रभावी इनपुट (\"प्रॉम्प्ट\" कहा जाता है) डिजाइन करने की कला और विज्ञान है। जैसा कि GPT-3, GPT-4, और GEMINI जैसे LLMS तेजी से शक्तिशाली और बहुमुखी हो जाते हैं, जिस तरह से हम हमारे अनुरोधों को वाक्यांश करते हैं, वह उनकी प्रतिक्रियाओं की गुणवत्ता और प्रासंगिकता को गहराई से प्रभावित करता है। यह सीखने जैसा है कि बहुत ही जानकार से सबसे उपयोगी जवाब प्राप्त करने के लिए सही प्रश्न पूछना है, लेकिन कभी -कभी शाब्दिक, विशेषज्ञ। <br> <br> <br> \n<b> शीघ्र इंजीनियरिंग का लक्ष्य: </b> <br> \nप्राथमिक लक्ष्य शिल्प संकेतों के लिए है जो स्पष्ट, विशिष्ट हैं, और वांछित प्रकार के पाठ, कोड या अन्य आउटपुट को उत्पन्न करने की दिशा में एलएलएम को निर्देशित करने के लिए पर्याप्त संदर्भ प्रदान करते हैं। प्रभावी शीघ्र इंजीनियरिंग अस्पष्टता को कम करता है और प्रासंगिक और सटीक परिणाम प्राप्त करने की संभावना को अधिकतम करता है। <br> <br> \n<b> शीघ्र इंजीनियरिंग के प्रमुख सिद्धांत: </b> <br> \n1। <b> स्पष्टता और विशिष्टता: </b> आप एलएलएम को क्या करना चाहते हैं, उसमें सटीक रहें। अस्पष्ट भाषा से बचें। आउटपुट की वांछित प्रारूप, टोन, लंबाई और शैली निर्दिष्ट करें। <br> \n2। <b> संदर्भ प्रदान करें: </b> एलएलएम को आवश्यक पृष्ठभूमि की जानकारी दें। इसमें वांछित इनपुट/आउटपुट जोड़े (कुछ-शॉट प्रॉम्प्टिंग) के उदाहरण शामिल हो सकते हैं, शर्तों को परिभाषित करना, या परिदृश्य सेट करना। <br> \n3। <b> कार्य को परिभाषित करें: </b> स्पष्ट रूप से उस कार्य को बताएं जिसे आप एलएलएम को प्रदर्शन करना चाहते हैं (जैसे, \"निम्नलिखित लेख को संक्षेप में प्रस्तुत करें,\" \"एक पायथन फ़ंक्शन लिखें,\" \"प्रदान किए गए पाठ के आधार पर प्रश्न का उत्तर दें\") <br> <br> <br> \n4। <b> वांछित आउटपुट प्रारूप निर्दिष्ट करें: </b> यदि आपको एक विशिष्ट प्रारूप में आउटपुट की आवश्यकता है (जैसे, एक बुलेटेड सूची, एक JSON ऑब्जेक्ट, एक संवाद), स्पष्ट रूप से यह बताओ। \n5। <b> iterate और रिफाइन: </b> प्रॉम्प्ट इंजीनियरिंग अक्सर एक पुनरावृत्त प्रक्रिया होती है। आपको किसी विशेष एलएलएम और टास्क के लिए सबसे अच्छा काम करने के लिए अलग -अलग वाक्यांश और संरचनाओं की कोशिश करने की आवश्यकता हो सकती है। <br> \n6। <b> नकारात्मक बाधाओं पर विचार करें: </b> कभी -कभी, एलएलएम को बताना कि क्या * नहीं * करना उतना ही उपयोगी हो सकता है जितना कि यह बताने के लिए कि क्या करना है। <br> <br> <br> \n<b> प्रॉम्प्टिंग के प्रकार: </b> <br> \n* <b> शून्य-शॉट प्रॉम्प्टिंग: </b> एलएलएम को कोई उदाहरण प्रदान किए बिना एक कार्य करने के लिए कह रहा है। <br> \n* <b> कुछ-शॉट प्रॉम्प्टिंग: </b> एलएलएम को निर्देशित करने के लिए इनपुट/आउटपुट जोड़े के कुछ उदाहरण प्रदान करना। <br> \n* <b> चेन-ऑफ-थॉट प्रॉम्प्टिंग: </b> एलएलएम से पूछना कि अंतिम उत्तर प्रदान करने से पहले इसकी चरण-दर-चरण तर्क प्रक्रिया दिखाने के लिए। \nप्रॉम्प्ट इंजीनियरिंग एक तेजी से विकसित होने वाला कौशल है क्योंकि एलएलएम अधिक परिष्कृत हो जाते हैं। यह मास्टरिंग उपयोगकर्ताओं को सामग्री निर्माण और अनुवाद से लेकर कोडिंग सहायता और सूचना पुनर्प्राप्ति तक, अनुप्रयोगों की एक विस्तृत श्रृंखला के लिए इन शक्तिशाली एआई मॉडल की पूरी क्षमता को अनलॉक करने की अनुमति देता है। यह विशेष रूप से बड़े भाषा मॉडल (एलएलएम) और फाउंडेशन मॉडल के लिए प्रासंगिक है, जो बड़े पैमाने पर डेटासेट पर पूर्व-प्रशिक्षित हैं और नई अवधारणाओं को सामान्य कर सकते हैं।",
  "quiz_hi": [
    {
      "question": "प्रॉम्प्ट इंजीनियरिंग का मुख्य लक्ष्य क्या है?",
      "options": [
        "LLMS को धीमा करने के लिए",
        "एलएलएम व्यवहार और वांछित आउटपुट को निर्देशित करने के लिए प्रभावी इनपुट डिजाइन करने के लिए",
        "गलत जानकारी देने में एलएलएम को ट्रिक करने के लिए",
        "जितना संभव हो उतना अस्पष्ट बनाने के लिए"
      ],
      "answer": 1
    },
    {
      "question": "प्रॉम्प्ट इंजीनियरिंग के किस सिद्धांत में वांछित इनपुट/आउटपुट जोड़े के उदाहरण प्रदान करना शामिल है?",
      "options": [
        "स्पष्टता और विशिष्टता",
        "कार्य को परिभाषित करें",
        "कुछ-शॉट संकेत",
        "नकारात्मक बाधाएं"
      ],
      "answer": 2
    },
    {
      "question": "प्रॉम्प्ट इंजीनियरिंग एक महत्वपूर्ण कौशल क्यों बन रहा है?",
      "options": [
        "क्योंकि एलएलएम कम शक्तिशाली होते जा रहे हैं",
        "क्योंकि एलएलएम तेजी से शक्तिशाली होते जा रहे हैं और जिस तरह से हम वाक्यांश अनुरोधों को प्रभावित करते हैं वह उनकी प्रतिक्रियाओं को प्रभावित करता है",
        "क्योंकि इसके बिना एलएलएम से उपयोगी आउटपुट प्राप्त करना संभव नहीं है",
        "यह एक महत्वपूर्ण कौशल नहीं है"
      ],
      "answer": 1
    }
  ]
}